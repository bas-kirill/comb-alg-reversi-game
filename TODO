1. Получить все возможные ходы
Для этого нужно написать функции isHorizontal, isVertical, isDiagonals, которые возвращают есть ли в строке/колонке/диагоналях символы '*', '&'.
Если выполняется какая-либо из них, тогда всё ок - это и есть возможный ход.

1.1 Также нужно учитывать, что первый ход может делать компьютер, поэтому нужно спроектировать программу так, чтобы она корректна себя вела в этом случае.
1.3.0 Написать методы drawHorizontal, drawVertical, drawDiagonals, которые отвечают за покраску поля согласно правилам на очередном ходе. 
	Эти функции принимают последний сделанный ход и красят все вражеские клетки согласно правилам. Для этого, в случае drawHorizontal, вычисляется 
	максимальное расстояние между вновь сделанным ходом и остальными собственными фишками, и все клетки между ними красятся.
1.3.1 Функции drawHorizontal, drawVertical, drawDiagonals написаны неверно, потому что нужно красить только те клетки, между которыми есть 
	  вражеские фишки и союзная на конце. Если это не выполняется, то мы не красим.
1.4 Функция doStep выполняет ход за человека. 
1.5 Функция make_uci преобразует {<row>, <col>} в международный стандарт ходов в шахматах.
1.6 Функция get_uci преобразует строку в формате UCI в пару {<row>, <col>}. Предполагается, что ввод всегда корректный, поэтому проверок "от дурака" делать не надо.
1.7 Нужно исправить функцию get_available_spots, потому что подобран случай, когда она отрабатывает неверно. Отрабатывает неверно именно функция isHorizontal. Но так
	как isVertical и isDiagonal написаны похожим образом, то и их нужно поменять.
	

2. Первая версия игры - это рандом, поэтому будем ставить фишку в доступное для хода место.

3. Вторая версия игры - это minimax.

4. Третья версия игры - это усовершенстование minimax при помощи альфа-бета отсечений.

5. Четвертая версия игры - это третья версия + эвристики, которые можно найти на сайте: https://www.eothello.com/
